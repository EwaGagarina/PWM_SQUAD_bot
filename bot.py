
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
import os
import random

# –¢–æ–∫–µ–Ω –°–∫–≤–∞–¥—ã
API_TOKEN = "7876359886:AAH50-gY1Ub2QEvXtQp6FiS1UlU2l3oPHXo"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users = {}

def get_user_data(user_id):
    if user_id not in users:
        users[user_id] = {"coins": 0, "beer": 0, "fish": 0, "ore": 0}
    return users[user_id]

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("–ô–æ—É! –Ø –°–∫–≤–∞–¥–∞. –ü–∏—à–∏ /–ø–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é üòâ")

@dp.message_handler(commands=["–ø–æ–º–æ—â—å"])
async def help_cmd(message: types.Message):
    await message.reply(
        "‚ú® –Ø —É–º–µ—é:\n"
        "/–∫–æ–ø–∞—Ç—å ‚Äî –¥–æ–±—ã—Ç—å —Ä—É–¥—É\n"
        "/—Ä—ã–±–∞—á–∏—Ç—å ‚Äî –ø–æ–π–º–∞—Ç—å —Ä—ã–±—É\n"
        "/–ø–∏–≤–æ ‚Äî –∫—É–ø–∏—Ç—å –ø–∏–≤–æ (10 –º–æ–Ω–µ—Ç)\n"
        "/—Ä–µ–π—Ç–∏–Ω–≥ ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –ø–∏–≤—É\n"
        "/–∫–æ—à–µ–ª—ë–∫ ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "\nRP-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/–æ–±–Ω—è—Ç—å @—é–∑–µ—Ä\n"
        "/—É–¥–∞—Ä–∏—Ç—å @—é–∑–µ—Ä\n"
        "/—É–∫—É—Å–∏—Ç—å @—é–∑–µ—Ä\n"
        "/–∏—Å–ø—É–≥–∞—Ç—å @—é–∑–µ—Ä\n"
        "/–º—É—Ä–ª—ã–∫–∞—Ç—å @—é–∑–µ—Ä\n"
        "/—Å—Ö–≤–∞—Ç–∏—Ç—å @—é–∑–µ—Ä\n"
        "/–ª–∞—Å–∫–∞—Ç—å @—é–∑–µ—Ä\n"
        "/–∞–Ω–µ–∫–¥–æ—Ç ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–∏–∫–æ–ª"
    )

@dp.message_handler(commands=["–∫–æ–ø–∞—Ç—å"])
async def dig(message: types.Message):
    user = get_user_data(message.from_user.id)
    amount = random.randint(5, 15)
    user["coins"] += amount
    user["ore"] += amount
    await message.reply(f"‚õèÔ∏è –°–∫–≤–∞–¥–∞ –≤—ã–∫–æ–ø–∞–ª–∞ –¥–ª—è —Ç–µ–±—è {amount} —Ä—É–¥—ã! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user['coins']} –º–æ–Ω–µ—Ç.")

@dp.message_handler(commands=["—Ä—ã–±–∞—á–∏—Ç—å"])
async def fish(message: types.Message):
    user = get_user_data(message.from_user.id)
    amount = random.randint(3, 12)
    user["coins"] += amount
    user["fish"] += amount
    await message.reply(f"üé£ –¢—ã –ø–æ–π–º–∞–ª —Ä—ã–±–∫—É –Ω–∞ {amount} –º–æ–Ω–µ—Ç! –í—Å–µ–≥–æ —É —Ç–µ–±—è {user['coins']} –º–æ–Ω–µ—Ç.")

@dp.message_handler(commands=["–ø–∏–≤–æ"])
async def beer(message: types.Message):
    user = get_user_data(message.from_user.id)
    if user["coins"] >= 10:
        user["coins"] -= 10
        user["beer"] += 1
        await message.reply(f"üç∫ –°–∫–≤–∞–¥–∞ –Ω–∞–ª–∏–ª–∞ —Ç–µ–±–µ –ø–∏–≤–∞! –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {user['beer']}")
    else:
        await message.reply("üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 10.")

@dp.message_handler(commands=["–∫–æ—à–µ–ª—ë–∫"])
async def wallet(message: types.Message):
    user = get_user_data(message.from_user.id)
    await message.reply(
        f"üíº –ë–∞–ª–∞–Ω—Å:\n–ú–æ–Ω–µ—Ç—ã: {user['coins']}\n–ü–∏–≤–æ: {user['beer']} üçª\n–†—É–¥–∞: {user['ore']} ‚õèÔ∏è\n–†—ã–±–∞: {user['fish']} üêü"
    )

@dp.message_handler(commands=["—Ä–µ–π—Ç–∏–Ω–≥"])
async def rating(message: types.Message):
    sorted_users = sorted(users.items(), key=lambda x: x[1]["beer"], reverse=True)
    text = "üèÜ –¢–æ–ø –ø—å—é—â–∏—Ö –°–∫–≤–∞–¥–∏–Ω—ã—Ö –ø–∏–≤—É–Ω–æ–≤:\n"
    for i, (uid, data) in enumerate(sorted_users[:10], start=1):
        try:
            user = await bot.get_chat(uid)
            name = user.first_name
        except:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"
        text += f"{i}. {name} ‚Äî {data['beer']} üç∫\n"
    await message.reply(text or "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏–ª –ø–∏–≤–æ —Å–æ –°–∫–≤–∞–¥–æ–π.")

rp_actions = {
    "–æ–±–Ω—è—Ç—å": "ü§ó –°–∫–≤–∞–¥–∞ –Ω–µ–∂–Ω–æ –æ–±–Ω—è–ª–∞ {user}. –ù—É –≤—Å—ë, —Ö–≤–∞—Ç–∏—Ç, –¥–∞–ª—å—à–µ —Å–∞–º–∞!",
    "—É–¥–∞—Ä–∏—Ç—å": "ü•ä –°–∫–≤–∞–¥–∞ —Å–º–∞—á–Ω–æ —É–¥–∞—Ä–∏–ª–∞ {user}. –í–æ—Ç —Ç–∞–∫!",
    "—É–∫—É—Å–∏—Ç—å": "ü¶∑ –°–∫–≤–∞–¥–∞ —É–∫—É—Å–∏–ª–∞ {user}. –ó–∞ —É—Ö–æ.",
    "–∏—Å–ø—É–≥–∞—Ç—å": "üëª –°–∫–≤–∞–¥–∞ –∏—Å–ø—É–≥–∞–ª–∞ {user}! –ë—É!",
    "–º—É—Ä–ª—ã–∫–∞—Ç—å": "üòª –°–∫–≤–∞–¥–∞ –º—É—Ä–ª—ã—á–µ—Ç —Ä—è–¥–æ–º —Å {user}. –ü—Ä–∏—è—Ç–Ω–æ, –¥–∞?",
    "—Å—Ö–≤–∞—Ç–∏—Ç—å": "ü´≥ –°–∫–≤–∞–¥–∞ —Å—Ö–≤–∞—Ç–∏–ª–∞ {user} –∑–∞ —à–∫–∏—Ä–∫—É. –ê –Ω—É —Å—Ç–æ—è—Ç—å!",
    "–ª–∞—Å–∫–∞—Ç—å": "üíñ –°–∫–≤–∞–¥–∞ –Ω–∞—á–∞–ª–∞ –ª–∞—Å–∫–∞—Ç—å {user}. –•–µ-—Ö–µ-—Ö–µ..."
}

@dp.message_handler(commands=list(rp_actions.keys()))
async def rp_command(message: types.Message):
    cmd = message.get_command().lstrip("/")
    target = message.get_args() or message.from_user.first_name
    action_text = rp_actions.get(cmd, "").format(user=target)
    await message.reply(action_text)

jokes = [
    "‚Äî –°–∫–≤–∞–¥–∞, —Ç—ã –≥–¥–µ –±—ã–ª–∞?\n‚Äî –í –∫—ç—à–µ. –û—á–∏—Å—Ç–∏–ª–∏ –º–µ–Ω—è!",
    "–ü–æ—á–µ–º—É –°–∫–≤–∞–¥–∞ –Ω–µ –ø—å—ë—Ç —á–∞–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –ø–∏–≤–æ ‚Äî –ª—É—á—à–µ!",
    "–£ –°–∫–≤–∞–¥—ã –Ω–µ—Ç –±–∞–≥–æ–≤. –ï—Å—Ç—å —Ñ–∏—á–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Å–º–µ—à–Ω–æ."
]

@dp.message_handler(commands=["–∞–Ω–µ–∫–¥–æ—Ç"])
async def joke(message: types.Message):
    await message.reply("ü§£ " + random.choice(jokes))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
